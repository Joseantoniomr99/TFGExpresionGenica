getwd()
system("type R")
R.home()
file.path(R.home("bin"), "R")
install.packages("pbcmc v1.0.0")
if(requireNamespace("breastCancerNKI")){
object<-loadBCDataset(Class=PAM50, libname="nki", verbose=TRUE)
object
##Now we can inspect the object
head(exprs(object))      ##The gene expression
head(annotation(object)) ##The available annotation
head(targets(object))    ##The clinical data present in the package
}
install.packages("breastCancerNKI")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("breastCancerNKI")
if(requireNamespace("breastCancerNKI")){
object<-loadBCDataset(Class=PAM50, libname="nki", verbose=TRUE)
object
##Now we can inspect the object
head(exprs(object))      ##The gene expression
head(annotation(object)) ##The available annotation
head(targets(object))    ##The clinical data present in the package
}
install.packages("pbcmc v1.0.0")
install.packages("pbcmc")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("pbcmc")
if(requireNamespace("breastCancerNKI")){
object<-loadBCDataset(Class=PAM50, libname="nki", verbose=TRUE)
object
##Now we can inspect the object
head(exprs(object))      ##The gene expression
head(annotation(object)) ##The available annotation
head(targets(object))    ##The clinical data present in the package
}
library(pbcmc)
source("https://bioconductor.org/biocLite.R")
biocLite("pbcmc")
combined = read.csv("/Users/aurelio/Downloads/combined_study_clinical_data.tsv", sep = "\t")
View(combined)
names(combined)
combined$American.Joint.Committee.on.Cancer.Metastasis.Stage.Code
unique(combined$American.Joint.Committee.on.Cancer.Metastasis.Stag)e.Code
unique(combined$American.Joint.Committee.on.Cancer.Metastasis.Stage.Code)
combinedAmerican.Joint.Committee.on.Cancer.Metastasis.Stage.Code
library(dplyr)
dplyr::filter(combined, American.Joint.Committee.on.Cancer.Metastasis.Stage.Code == "M0")
nrow(dplyr::filter(combined, American.Joint.Committee.on.Cancer.Metastasis.Stage.Code == "M0"))
nrow(dplyr::filter(combined, American.Joint.Committee.on.Cancer.Metastasis.Stage.Code == "NA"))
nrow(dplyr::filter(combined, American.Joint.Committee.on.Cancer.Metastasis.Stage.Code == NA))
nrow(dplyr::filter(combined, is.na(American.Joint.Committee.on.Cancer.Metastasis.Stage.Code)))
nrow(dplyr::filter(combined, !is.na(American.Joint.Committee.on.Cancer.Metastasis.Stage.Code)))
1084-895
kk = read.csv("/Users/aurelio/Downloads/HG-U133A_2-na36-annot-csv/HG-U133A_2.na36.annot.csv")
View(kk)
rm(kk)
kk = read.csv("/Users/aurelio/Downloads/HG-U133A_2-na36-annot-csv/HG-U133A_2.na36.annot.csv", skip = 25)
View(kk)
d = read.csv("/Users/aurelio/OneDrive - Universidad de Málaga/p.docencia_2019-2020/BioqEstr_19-20/reports/Class_10_01_2019__presentacion_encuesta.csv")
d = read.csv2("/Users/aurelio/OneDrive - Universidad de Málaga/p.docencia_2019-2020/BioqEstr_19-20/reports/Class_10_01_2019__presentacion_encuesta.csv")
View(d)
library(dplyr)
dplyr::filter(d, quimica.1 == 1)
nrow(dplyr::filter(d, quimica.1 == 1))
nrow(dplyr::filter(d, quimica.1 == 1))/nrow(d)
nrow(dplyr::filter(d, biologia.1 == 1))/nrow(d)
nrow(dplyr::filter(d, quimica.2 == 1))/nrow(d)
nrow(dplyr::filter(d, quimica == 1))/nrow(d)
nrow(dplyr::filter(d, biologia.2 == 1))/nrow(d)
library(lubridate)
hm(09:15)
hm("09:15")
s = hm("09:15")
e = hm("12:00")
s %--% e
interval(s, e)
duration <- c("3:38", "00:47")
hm(duration)
hm(duration)
hm(c("3:38", "00:47"))
hm(c("9:15", "12:00"))
"3:38" %--% "00:47"
hm("3:38") %--% hm("00:47")
hm(c("3:38", "00:47"))
as.period(hm(c("3:38", "00:47")))
as.period(hm("3:38"), hm("00:47"))
as.period(hm("03:38"), hm("00:47"))
"3:38" %--% "00:47"
date1 = as.POSIXlt('2015-10-05T20:57:00.000',format="%Y-%m-%dT%H:%M:%S")
date1 = as.POSIXlt('20:57:00.000',format="%H:%M:%S")
date1
date2 = as.POSIXlt('20:59:00.000',format="%H:%M:%S")
difftime(date1,date2,units="mins")
difftime(date1,date2,units="hours")
difftime(date1,date2,units="mins")
e = as.POSIXlt('12:00:00.000',format="%H:%M:%S")
s = as.POSIXlt('09:15:00.000',format="%H:%M:%S")
difftime(e,s,units="mins")
difftime(e,s,units="hours")
e1 = as.POSIXlt('08:00:00.000',format="%H:%M:%S")
s1 = as.POSIXlt('06:30:00.000',format="%H:%M:%S")
s2 = as.POSIXlt('09:15:00.000',format="%H:%M:%S")
e2 = as.POSIXlt('12:00:00.000',format="%H:%M:%S")
e3 = as.POSIXlt('14:30:00.000',format="%H:%M:%S")
s3 = as.POSIXlt('13:00:00.000',format="%H:%M:%S")
difftime(e1,s1,units="hours")
difftime(e1,s1,units="hours") + difftime(e2,s2,units="hours")
difftime(e1,s1,units="hours") + difftime(e2,s2,units="hours") + difftime(e3,s3,units="hours")
s4 = as.POSIXlt('14:30:00.000',format="%H:%M:%S")
e4 = as.POSIXlt('14:30:00.000',format="%H:%M:%S")
s4 = as.POSIXlt('14:00:00.000',format="%H:%M:%S")
difftime(e1,s1,units="hours") + difftime(e2,s2,units="hours") + difftime(e3,s3,units="hours") + difftime(e4,s4,units="hours")
s2_ = as.POSIXlt('10:30:00.000',format="%H:%M:%S")
difftime(e1,s1,units="hours") + difftime(e2,s2_,units="hours") + difftime(e3,s3,units="hours") + difftime(e4,s4,units="hours")
e4_ = as.POSIXlt('15:30:00.000',format="%H:%M:%S")
difftime(e1,s1,units="hours") + difftime(e2,s2_,units="hours") + difftime(e3,s3,units="hours") + difftime(e4_,s4,units="hours")
## _Use the Shiny app
runCoga()
library(coga)
## _Use the Shiny app
runCoga()
install.packages(c("igraph", "RColorBrewer", "Hmisc", "RJSONIO", "whisker", "yaml", "pheatmap", "ggplot2"))
install.packages(c("igraph", "RColorBrewer", "Hmisc", "RJSONIO", "whisker", "yaml", "pheatmap", "ggplot2"))
install.packages("devtools")
devtools::install_version("shiny", "0.8.0")
load("/Users/aurelio/OneDrive - Universidad de Málaga/p.MLGE_IMM/results/exp2020-05-05/BIOCARTA_IL12_PATHWAY_gene_association_degrees_PRE_vs_POST_weighted_Pearson_correlation.RData")
View(associationDegrees)
substr(x = "first_50_added_nodes_weight_1.txt", start = 7, stop = 8)
out = "/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2021-04-29/"
paste(out,"first_50_added_nodes_weight_1.txt", sep="")
interactome.df = read.table(file = "/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2021-04-29/brcaRTN.tsv", header = T, sep = " ")
interactome.df = read.table(file = "/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2021-04-29/brcaRTN.tsv", header = T, sep = " ")
interactome.df = read.table(file = "/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2021-04-29/brcaRTN.tsv", header = T, sep = " ")
View(interactome.df)
interactome.df = read.csv(file = "/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2021-04-29/brcaRTN.tsv", header = T, sep = " ")
interactome.df = read.csv(file = "/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2021-04-29/brcaRTN.tsv", sep = " ")
interactome.df = read.csv(file = "/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2021-04-29/brcaRTN.tsv", sep = "\s")
interactome.df = read.csv(file = "/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2021-04-29/brcaRTN.tsv")
interactome.df = read.csv(file = "/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2021-04-29/brcaRTN.tsv")
interactome.df = read.csv(file = "/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2021-04-29/brcaRTN.tsv")
interactome.df = read.csv(file = "/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2021-04-29/brcaRTN.tsv")
interactome.df = read.csv(file = "/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2021-04-29/brcaRTN.tsv", sep = "\s")
interactome.df = read.csv(file = "/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2021-04-29/brcaRTN.tsv", sep = " ")
load("/Users/aurelio/OneDrive - Universidad de Málaga/p.MetastaticPhenotype/results/exp2018-07-17/METABRIC_eSet.RData")
library(clusterProfiler)
data(geneList, package = "DOSE")
gene <- names(geneList [abs(geneList > 2)])
gene
library(clusterProfiler)
data(geneList, package="DOSE")
gene <- names(geneList)[abs(geneList) > 2]
# Entrez gene ID
head(gene)
library(clusterProfiler)
bitr(x, fromType="SYMBOL", toType=c("UNIPROT", "ENSEMBL"), OrgDb="org.Hs.eg.db")
library(org.Mm.eg.db)
bitr("ENSMUSP00000000003", fromType="ENSEMBL", toType=c("SYMBOL", "ENSEMBLPROT", "ENTREZID"), OrgDb="org.Mm.eg.db")
bitr("ENSMUSP00000000003", fromType="ENSEMBLPROT", toType=c("SYMBOL", "ENSEMBLPROT", "ENTREZID"), OrgDb="org.Mm.eg.db")
keys(keytype = "ENSEMBLPROT")
bitr("PBSN", fromType="SYMBOL", toType=c("SYMBOL", "ENSEMBLPROT", "ENTREZID"), OrgDb="org.Mm.eg.db")
bitr("Pbsn", fromType="SYMBOL", toType=c("SYMBOL", "ENSEMBLPROT", "ENTREZID"), OrgDb="org.Mm.eg.db")
bitr("Wnt3", fromType="SYMBOL", toType=c("SYMBOL", "ENSEMBLPROT", "ENTREZID"), OrgDb="org.Mm.eg.db")
bitr("Wnt3", fromType="SYMBOL", toType=c("ENSEMBL", "ENSEMBLPROT", "ENTREZID"), OrgDb="org.Mm.eg.db")
bitr("ENSMUSP00000000127", fromType="ENSEMBLPROT", toType=c("ENSEMBL", "ENSEMBLPROT", "ENTREZID", "SYMBOL"), OrgDb="org.Mm.eg.db")
suppressPackageStartupMessages(library(STRINGdb))
install.packages(c("rlang", "tidyselect"))
library(STRINGdb)
data(diff_exp_example1)
string_db <- STRINGdb$new(
version="11.5"  # STRINGdb needs the most recent version of STRING, 11.5 at 22-02-09
,species=9606
,score_threshold= sct
,input_directory="")
sct = 800
string_db <- STRINGdb$new(
version="11.5"  # STRINGdb needs the most recent version of STRING, 11.5 at 22-02-09
,species=9606
,score_threshold= sct
,input_directory="")
string_db$map( diff_exp_example1, "gene", removeUnmappedRows = TRUE )
data(diff_exp_example1)
string_db$map( diff_exp_example1, "gene", removeUnmappedRows = TRUE )
head(diff_exp_example1)
string_db$map()
string_db$map( diff_exp_example1, "gene", removeUnmappedRows = TRUE )
STRINGdb$help("map")
string_db$map( diff_exp_example1, gene, removeUnmappedRows = TRUE )
string_db$map(diff_exp_example1, gene)
string_db$map(diff_exp_example1, "gene")
names(diff_exp_example1)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("STRINGdb")
library(STRINGdb)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("STRINGdb")
remove.packages(c("boot"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("STRINGdb")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("STRINGdb")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("STRINGdb")
data(diff_exp_example1)
string_db <- STRINGdb$new(
version="11.5"  # STRINGdb needs the most recent version of STRING, 11.5 at 22-02-09
,species=9606
,score_threshold= sct
,input_directory="")
sct = 800
library(STRINGdb)
string_db <- STRINGdb$new(
version="11.5"  # STRINGdb needs the most recent version of STRING, 11.5 at 22-02-09
,species=9606
,score_threshold= sct
,input_directory="")
string_db$map( diff_exp_example1, "gene", removeUnmappedRows = TRUE )
.libPaths()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("STRINGdb")
library(STRINGdb)
string_db <- STRINGdb$new(
version="11.5"  # STRINGdb needs the most recent version of STRING, 11.5 at 22-02-09
,species=9606
,score_threshold= sct
,input_directory="")
data(diff_exp_example1)
string_db$map( diff_exp_example1, "gene", removeUnmappedRows = TRUE )
sessionInfo()
install.packages("/Users/aurelio/Downloads/STRINGdb_2.6.1.tar.gz", repos = NULL, type="source")
sessionInfo()
detach(package:STRINGdb,unload=TRUE)
library(STRINGdb)
sessionInfo()
string_db <- STRINGdb$new(
version="11.5"  # STRINGdb needs the most recent version of STRING, 11.5 at 22-02-09
,species=9606
,score_threshold= sct
,input_directory="")
sct = 800
data(diff_exp_example1)
string_db$map( diff_exp_example1, "gene", removeUnmappedRows = TRUE )
setwd("/Users/aurelio/Library/CloudStorage/OneDrive-UniversidaddeMálaga/ar.docencia_2021-2022/TFG/TFG_JoseA-Munoz/TFGExpresionGenica")
#Se cargan las librerías
library(GEOquery)
library(limma)
library(umap)
library(WGCNA)
#Opción para que permita descargarse los datos
Sys.setenv("VROOM_CONNECTION_SIZE" = 500000000)
#Se descargan los datos
gset <- getGEO("GSE106977", GSEMatrix =TRUE, AnnotGPL=FALSE)
